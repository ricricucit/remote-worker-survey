
//****************************************************************************//
//*                                                                          *//
//*                  I MIXIN - FUNZIONI CHE COMPONGONO COSE
//*                 descrizione - descrizione - descrizione
//*                                                                          *//
//****************************************************************************//



//****************************************************************************//
//                            MIXIN TIPOGRAFICI
//****************************************************************************//

///
// Dimensioni e margini caratteri
///

@mixin size($size: p) {
  font-size: size($size, fs);
  line-height: size($size, lh);
}

@mixin margin($size: p) {
  margin-top: size($size, mt);
  margin-bottom: size($size, mb);
}

@mixin m-size($size: h3, $mt: $size, $mb: $size) {
  font-size: m-size($size, fs);
  line-height: m-size($size, lh);

  @if $mt != $size {
    margin-top: $mt;
  }
  @else {
    margin-top: m-size($size, mt);
  }

  @if $mb != $size {
    margin-bottom: $mt;
  }
  @else {
    margin-bottom: m-size($size, mb);
  }
}

///
// Decorazioni caratteri (family e boldness)
///
@mixin decoration($size: p) {
  font-family: family(decoration($size, fm), fm);
  font-weight: family(decoration($size, fm), wt);
}


@mixin font-alt($size: p) {
  @include size($size);
  @include margin($size);
  @include family($size);
}

@mixin font($size: p, $fm: $size, $wt: $size, $mt: $size, $mb: $size) {
  @include size($size);

  //MARGIN TOP
  @if $mt == 0 {
    margin-top: $mt;
  }
  @else {
    margin-top: size($size, mt);
  }

  //MARGIN TOP
  @if $mb == 0 {
    margin-bottom: $mb;
  }
  @else {
    margin-bottom: size($size, mb);
  }

  //Family
  @if $fm == serif or $fm == sans or $fm == special {
    font-family: family($fm, fm);
  }
  @else {
    font-family: family(decoration($size, fm), fm);
  }

  //WEIGHT
  @if $wt == bolder or $wt == bold or $wt == normal or $wt == light {
    @if $fm == serif or $fm == sans or $fm == special {
      font-weight: family($fm, $wt);
    }
    @else { // DOVREI ANDARE A PESCARE LA FAMIGLIA DELLA GRANDEZZA RICHIAMATA e POTERLA METTERE QUI - FORSE CI VUOLE UN ALTRA FUNZIONE CHE FACCIA UN MERGE?!?
      font-weight: family(decoration($size, fm), $wt);
    }
  }

  @else {
    @if $fm == serif or $fm == sans or $fm == special {
      font-weight: family($fm, decoration($size, wt));
    }
    @else {
      font-weight: family(decoration($size, fm), decoration($size, wt));
    }
  }
}

///
// HR
///
@mixin hr-spacing {
  border: $hr-spacing;
  margin: -$hr-spacing 0;
}



//****************************************************************************//
//                                    BOTTONI
//                   il padding va a compensare per i bordi
//              il valore del padding deve essere pari alla metà di
//                (interlinea meno la somma dei bordi sup e inf)
//****************************************************************************//

///
// Base dei bottoni: display, font-family e ombre
///
%button {
  display:inline-block;
  font-family: $ff-button; //TODO
  white-space: normal;
  border-style: solid;
  box-shadow: $button-shadow;
}

///
// Mixin per i bottoni con padding
///
@mixin button($size: p, $bw:2, $pw: null) {
  font-size: font($size, fs);
  line-height: font($size, lh);

  @if $pw == half {
    padding-top: bhpad($bw, $size);
    padding-bottom: bhpad($bw, $size);
  }

  @else if $pw == quarter {
    padding-top: bqpad($bw, $size);
    padding-bottom: bqpad($bw, $size);
  }

  @else {
    padding-top: bpad($bw, $size);
    padding-bottom: bpad($bw, $size);
  }

  border-bottom-width: $bw * 1px;
  border-top-width: $bw * 1px;
}

///
// Mixin per i bottoni con line-height
///
@mixin button-lh($size: p, $bw:2) {
  @include size($size);

  line-height: blh($bw, font($size, fs), font($size, lh));

  padding: 0 1.5em;
  border-bottom-width: $bw * 1px;
  border-top-width: $bw * 1px;
}


//****************************************************************************//
//                                    COLORI BOTTONI
//
//****************************************************************************//

////
//  Questo Mixin utilizza la funzione 'palette' in modo particolare
//
//  La variabile $palette, che va a selezionare il contesto (la key di
//  "primo livello") in cui vengono salvati i diversi COLORI, viene
//  dichiarata solamente al momento di utilizzo.
//
//  Nel caso specifico, verrà utilizzato un @each che looppa attraverso tutte
//  le palette per costruire delle classi dinamiche basate sulle palette
///
@mixin button-color($state:none, $palette:main) {

  @if $state != hover {
    background: palette($palette, button-bg);
    color: palette($palette, button);
    border-color: palette($palette, button-bg);
    border-bottom-color: darken(palette($palette, button-bg), 10%);
    opacity: 1;
  }

  @else {
    background: darken(palette($palette, button-bg), 5%);
    color: palette($palette, button);
    border-color: palette($palette, button-bg);
    border-bottom-color: darken(palette($palette, button-bg), 10%);
  }
}


//****************************************************************************//
//                                    BOTTONI SUBTLE
//****************************************************************************//
@mixin button-color-subtle($state:none, $palette:main) {

  @if $state != hover {
    background: palette($palette, button-bg-subtle);
    color: palette($palette, button-subtle);
    border-color: palette($palette, button-bg-subtle);
    border-bottom-color: darken(palette($palette, button-bg-subtle), 10%);
    opacity: 1;
  }

  @else {
    background: darken(palette($palette, button-bg-subtle), 5%);
    color: palette($palette, button-subtle);
    border-color: palette($palette, button-bg-subtle);
    border-bottom-color: darken(palette($palette, button-bg-subtle), 10%);
  }
}



//****************************************************************************//
//                                    FORMS
//****************************************************************************//

///
// Form Field size settings
///
@mixin form-field($size: p, $bw: 1) {
  font-family: inherit;
  font-size: font($size, fs);
  line-height: font($size, lh); //TOCR - forse è più facile farla con la funzione blh?
//  margin-bottom: font($size, mb);
  margin-top: 0;
  padding: bhpad($bw, $size) !important;
  border-width: $bw * 1px;
}

///
// Forms Labels size settings
///
@mixin form-label($size: p) {
  font-size: font($size, fs);
  line-height: font($size, lh) !important;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  padding-top: 0;
  font-family: form(label, fm);
  font-weight: form(label, wt);
  text-transform: uppercase; //TODO //TOCR
  letter-spacing: 0px;
}

///
// Forms Field Descritpions
///
@mixin form-desc($size: h5) {
  font-size: font($size, fs) !important;
  line-height: font($size, lh);
  font-style: none;
  margin: 0 !important;
  font-family: form(desc, fm);
  font-weight: form(desc, wt);
  text-transform: none; //TODO //TOCR
  letter-spacing: 0 !important;
  padding-top: font($size, lh);
}


//****************************************************************************//
//                            MEDIA QUERIES
//****************************************************************************//
@mixin breakpoint-max($media) {
  @if $media == xs {
    @media (max-width: em-bp($xs - 1)) { @content; }
  }
  @if $media == sm {
    @media (max-width: em-bp($sm - 1)) { @content; }
  }
  @if $media == md {
    @media (max-width: em-bp($md - 1)) { @content; }
  }
  @if $media == lg {
    @media (max-width: em-bp($lg - 1)) { @content; }
  }
  @if $media == xl {
    @media (max-width: em-bp($xl - 1)) { @content; }
  }
  @if $media == uxl {
    @media (max-width: em-bp($uxl - 1)) { @content; }
  }
}

@mixin breakpoint-min($media) {
  @if $media == xs {
    @media (min-width: em-bp($xs)) { @content; }
  }
  @if $media == sm {
    @media (min-width: em-bp($sm)) { @content; }
  }
  @if $media == md {
    @media (min-width: em-bp($md)) { @content; }
  }
  @if $media == lg {
    @media (min-width: em-bp($lg)) { @content; }
  }
  @if $media == xl {
    @media (min-width: em-bp($xl)) { @content; }
  }
  @if $media == uxl {
    @media (min-width: em-bp($uxl)) { @content; }
  }
}

/*@mixin respond-to($media) {

  @if $media == step-0 {
    @media only screen and (max-width: em-bp($website-)width - 1px) { @content; }
  }

  @else if $media == step-1 {
    @media only screen and (max-width: $s-desktop - 1px) { @content; }
  }

  @else if $media == step-2 {
    @media only screen and (max-width: $l-tablet) { @content; }
  }

  @else if $media == step-3 {
    @media only screen and (max-width: $p-tablet) { @content; }
  }

  @else if $media == min-step-3 {
    @media only screen and (min-width: $p-tablet) { @content; }
  }

  @else if $media == step-4 {
    @media only screen and (max-width: $l-phone) { @content; }
  }

  @else if $media == step-5 {
    @media only screen and (max-width: $p-phone) { @content; }
  }

  @else if $media == step-p0 {
    @media only screen and (min-width: $website-width ) { @content; }
  }

  @else if $media == step-p1 {
    @media only screen and (min-width: $s-desktop) { @content; }
  }

  @else if $media == step-p2 {
    @media only screen and (min-width: $u-hd) { @content; }
  }


  // DIVI Media queries
  //@media all and (min-width: 1405px)
  //@media all and (min-width: 1100px) and (max-width: 1405px)
  //@media all and (min-width: 981px) and (max-width: 1405px)
  //@media all and (min-width: 981px)
  //@media all and (max-width: 980px)
  //@media screen and (max-width: 782px)
  //@media all and (max-width: 767px)
  //@media all and (max-width: 768px)
  //@media all and (max-width: 479px)
  //@media all and (min-width: 480px)
  @else if $media == divi-p2 {
    @media all and (min-width: $divi-u-hd) { @content; }
  }

  @else if $media == divi-p1 {
    @media all and (min-width: $divi-large-desktop) { @content; }
  }

  @else if $media == divi-p0 {
    @media all and (min-width: $divi-small-desktop) and (max-width: $divi-large-desktop) { @content; }
  }

  @else if $media == divi-0 {
    @media all and (min-width: $divi-l-tablet + 1px) and (max-width: $divi-large-desktop) { @content; }
  }

  @else if $media ==  divi-1 {
    @media all and (min-width: $divi-l-tablet + 1px) { @content; }
  }

  @else if $media == divi-2 {
    @media all and (max-width: $divi-l-tablet) { @content; }
  }

  @else if $media == divi-3 {
    @media screen and (max-width: $divi-m-tablet) { @content; }
  }

  @else if $media == divi-4 {
    @media all and (max-width: $p-tablet) { @content; }
  }

  @else if $media == divi-5 {
    @media all and (max-width: $p-tablet + 1px) { @content; }
  }

  @else if $media == divi-6 {
    @media all and (max-width: $p-phone) { @content; }
  }

  @else if $media == divi-7 {
    @media all and (max-width: $p-phone + 1px) { @content; }
  }
}*/



//****************************************************************************//
//                            DECORAZIONI
//****************************************************************************//

///
// Overlay di colore da mettere sui ::before //TOCR
///
@mixin color-overlay($palette: main, $grade: 0.3) {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left:0;
//  background: palette($palette, overlay);
  background-color: rgba( palette($palette, overlay), $grade);
  z-index: 0;
}
